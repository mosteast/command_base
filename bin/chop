#!/bin/bash

# Script to divide a text file into n equal parts
# Usage examples:
#   ./chop input.txt 3
#   ./chop --input input.txt --parts 5
#   ./chop -i input.txt -p 4 --output chunk_prefix
#   ./chop --help

# Default values
input_file=""
num_parts=2
output_dir=""  # Will be set to input file directory
output_suffix=".txt"
lines_per_chunk=""  # New variable for lines per chunk

# Function to display usage
usage() {
    echo "Usage: $0 [OPTIONS] [input_file]"
    echo "Options:"
    echo "  [input_file]           Input file to divide (first positional argument)"
    echo "  --lines, -l NUM        Number of lines per chunk"
    echo "  --part, -p NUM         Number of parts to divide into (default: 2)"
    echo "  --output, -o DIR       Output directory (default: same directory as input file)"
    echo "  --suffix, -s SUFFIX    Output filename suffix (default: .txt)"
    echo "  --help, -h             Display this help message"
    echo ""
    echo "Examples:"
    echo "  $0 input.txt -l 3         # Divide input.txt into chunks of 3 lines each"
    echo "  $0 -i data.txt --part 5   # Divide data.txt into 5 equal parts"
    echo "  $0 -i data.txt -p 5 -s .txt -o output_dir   # With suffix and output dir"
    exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --input|-i)
            input_file="$2"
            shift 2
            ;;
        --lines|-l)
            lines_per_chunk="$2"
            shift 2
            ;;
        --part|-p)
            num_parts="$2"
            shift 2
            ;;
        --output|-o)
            output_dir="$2"
            shift 2
            ;;
        --suffix|-s)
            output_suffix="$2"
            shift 2
            ;;
        --help|-h)
            usage
            ;;
        *)
            # If positional arg and input_file is empty, use as input_file
            if [[ -z "$input_file" ]]; then
                input_file="$1"
            else
                echo "Unknown option or extra positional argument: $1"
                usage
            fi
            shift
            ;;
    esac
done

# Validate input file
if [[ -z "$input_file" ]]; then
    echo "Error: No input file specified"
    usage
fi

if [[ ! -f "$input_file" ]]; then
    echo "Error: Input file '$input_file' does not exist"
    exit 1
fi

# Set the default output directory to match the input file's directory
if [[ -z "$output_dir" ]]; then
    output_dir=$(dirname "$input_file")
fi

# Validate number of parts
if ! [[ "$num_parts" =~ ^[0-9]+$ ]]; then
    echo "Error: Number of parts must be a positive integer"
    exit 1
fi

if [[ "$num_parts" -lt 1 ]]; then
    echo "Error: Number of parts must be at least 1"
    exit 1
fi

# Get total number of lines in the input file
total_lines=$(wc -l < "$input_file")
echo "Total lines in $input_file: $total_lines"

# Calculate lines per part (rounding up)
if [[ -n "$lines_per_chunk" ]]; then
    num_parts=$(( (total_lines + lines_per_chunk - 1) / lines_per_chunk ))
    lines_per_part=$lines_per_chunk
else
    lines_per_part=$(( (total_lines + num_parts - 1) / num_parts ))
fi
echo "Dividing into $num_parts parts with approximately $lines_per_part lines each"

# Create output directory if it doesn't exist
mkdir -p "$output_dir"

# Split the file
current_line=1
# Get the base filename without path
base_filename=$(basename "$input_file")

for ((i=1; i<=num_parts; i++)); do
    # Calculate end line for this part
    if [[ $i -eq $num_parts ]]; then
        # Last part gets all remaining lines
        end_line=$total_lines
    else
        end_line=$((current_line + lines_per_part - 1))
        # Ensure we don't exceed total lines
        if [[ $end_line -gt $total_lines ]]; then
            end_line=$total_lines
        fi
    fi
    
    # Calculate number of lines to extract
    num_lines=$((end_line - current_line + 1))
    
    # Create output file name with input filename + .part_XX + suffix
    output_file="$output_dir/${base_filename}.part_$(printf "%02d" $i)${output_suffix}"
    
    # Extract lines from input file
    if [[ $num_lines -gt 0 ]]; then
        tail -n +$current_line "$input_file" | head -n $num_lines > "$output_file"
        echo "Created $output_file with $num_lines lines"
    fi
    
    # Update current line for next iteration
    current_line=$((end_line + 1))
    
    # If we've processed all lines, break
    if [[ $current_line -gt $total_lines ]]; then
        break
    fi
done

echo "File successfully divided into $num_parts parts in directory '$output_dir'" 