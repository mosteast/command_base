#!/bin/bash

# Initialize variables
CHANNEL_URL=""
PLAYLIST_URL=""
OUTPUT_DIR="~/Library/Mobile Documents/com~apple~CloudDocs/main/download/YouTube/%(uploader)s"
VIDEO_URLS=()
ONLY_AUDIO=false
ONLY_SUBTITLE=false
OVERWRITE=false

# Function to show usage
show_usage() {
    echo "Usage:"
    echo "  1. Channel download:"
    echo "     $(basename $0) -c|--channel <youtube_channel_url> [-o|--output <directory>]"
    echo "     Example: $(basename $0) -c https://www.youtube.com/@user1"
    echo ""
    echo "  2. Playlist download:"
    echo "     $(basename $0) -l|--list <youtube_playlist_url> [-o|--output <directory>]"
    echo "     Example: $(basename $0) -l https://www.youtube.com/playlist?list=xxx"
    echo ""
    echo "  3. Video download:"
    echo "     $(basename $0) <video_url1> [video_url2...] [output_directory]"
    echo "     Example: $(basename $0) https://youtu.be/xxx https://youtu.be/yyy ~/Downloads/YouTube"
    echo ""
    echo "Options:"
    echo "  -h, --help           Show this help message and exit"
    echo "  -c, --channel <url>   Download all videos from a YouTube channel"
    echo "  -l, --list <url>      Download all videos from a YouTube playlist"
    echo "  -o, --output <dir>    Specify output directory"
    echo "  --only-audio         Download only audio files"
    echo "  --only-subtitle      Download only subtitle files"
    echo "  --overwrite          Force overwrite existing files"
    echo "  --                    Pass additional options to yt-dlp"
    echo ""
    echo "Note: You must use exactly one input type (channel, playlist, or video URLs)"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -c|--channel)
            if [ -n "$2" ]; then
                CHANNEL_URL="$2"
                shift 2
            else
                echo "Error: Channel URL is required after -c|--channel option"
                show_usage
                exit 1
            fi
            ;;
        -l|--list)
            if [ -n "$2" ]; then
                PLAYLIST_URL="$2"
                shift 2
            else
                echo "Error: Playlist URL is required after -l|--list option"
                show_usage
                exit 1
            fi
            ;;
        -o|--output)
            if [ -n "$2" ]; then
                OUTPUT_DIR="$2"
                shift 2
            else
                echo "Error: Output directory is required after -o|--output option"
                show_usage
                exit 1
            fi
            ;;
        --only-audio)
            ONLY_AUDIO=true
            shift
            ;;
        --only-subtitle)
            ONLY_SUBTITLE=true
            shift
            ;;
        --overwrite)
            OVERWRITE=true
            shift
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "Error: Unknown option: $1"
            show_usage
            exit 1
            ;;
        *)
            # If it's the last argument and there are other video URLs, it *could* be an output directory
            if [[ $# -eq 1 && ${#VIDEO_URLS[@]} -gt 0 ]]; then
                # If the argument contains typical URL patterns, treat as a URL.
                if [[ "$1" == "http"* || "$1" == *".com"* || "$1" == *".be"* || "$1" == *"watch?v="* ]]; then
                    VIDEO_URLS+=("$1")
                else
                    OUTPUT_DIR="$1"
                fi
            else
                VIDEO_URLS+=("$1")
            fi
            shift
            ;;
    esac
done

# Validate audio/subtitle options
if [ "$ONLY_AUDIO" = true ] && [ "$ONLY_SUBTITLE" = true ]; then
    echo "Error: Cannot use both --only-audio and --only-subtitle options together"
    exit 1
fi

# Count how many input types are provided
INPUT_COUNT=0
[ -n "$CHANNEL_URL" ] && ((INPUT_COUNT++))
[ -n "$PLAYLIST_URL" ] && ((INPUT_COUNT++))
[ ${#VIDEO_URLS[@]} -gt 0 ] && ((INPUT_COUNT++))

# Validate input
if [ $INPUT_COUNT -eq 0 ]; then
    echo "Error: No input provided. Please provide one of:"
    echo "  - Channel URL (-c|--channel)"
    echo "  - Playlist URL (-l|--list)"
    echo "  - One or more video URLs"
    echo ""
    show_usage
    exit 1
elif [ $INPUT_COUNT -gt 1 ]; then
    echo "Error: Multiple input types provided. Please use only one of:"
    echo "  - Channel URL (-c|--channel)"
    echo "  - Playlist URL (-l|--list)"
    echo "  - One or more video URLs"
    echo ""
    echo "Current inputs:"
    [ -n "$CHANNEL_URL" ] && echo "  Channel URL: $CHANNEL_URL"
    [ -n "$PLAYLIST_URL" ] && echo "  Playlist URL: $PLAYLIST_URL"
    [ ${#VIDEO_URLS[@]} -gt 0 ] && echo "  Video URLs: ${VIDEO_URLS[*]}"
    exit 1
fi

# All remaining arguments will be passed to yt-dlp
EXTRA_OPTS="$@"

# Create download archive directory if it doesn't exist
ARCHIVE_DIR="${HOME}/.yt-dlp/archives"
mkdir -p "$ARCHIVE_DIR"

# Set format and additional options based on download type
if [ "$ONLY_AUDIO" = true ]; then
    FORMAT_OPTS="-f ba"
    EMBED_SUBS_OPTS=""
    WRITE_SUBS_OPTS=""
elif [ "$ONLY_SUBTITLE" = true ]; then
    FORMAT_OPTS="--skip-download"
    EMBED_SUBS_OPTS=""
    WRITE_SUBS_OPTS="--write-subs --write-auto-subs"
else
    FORMAT_OPTS=""
    EMBED_SUBS_OPTS="--embed-subs"
    WRITE_SUBS_OPTS="--write-subs --write-auto-subs"
fi

# Define match filter that allows Rumble videos to bypass subscription check
# For Rumble videos - no filter, for other extractors - check for subscription requirement
MATCH_FILTER="extractor!='Rumble' & extractor!='RumbleEmbed' & availability!='needs_subscription' | extractor='Rumble' | extractor='RumbleEmbed'"

# Handle channel URL mode
if [ -n "$CHANNEL_URL" ]; then
    # Convert @channel URL to channel/videos URL format
    if [[ "$CHANNEL_URL" == *"@"* ]]; then
        CHANNEL_URL="${CHANNEL_URL}/videos"
    fi

    # Generate a unique archive file name based on the channel URL
    ARCHIVE_FILE="${ARCHIVE_DIR}/$(echo "$CHANNEL_URL" | md5sum | cut -d' ' -f1).txt"

    yt-dlp --playlist-reverse \
    $EMBED_SUBS_OPTS \
    -o "$OUTPUT_DIR/%(playlist)s/%(n_entries+1-playlist_index)d.%(title)s.%(ext)s" \
    --cookies-from-browser chrome \
    -N 1 \
    $FORMAT_OPTS \
    $WRITE_SUBS_OPTS \
    --sub-langs "en,en-US,zh-Hans,zh-Hant,zh-CN,zh" \
    --continue \
    $( [ "$OVERWRITE" != true ] && echo "--download-archive $ARCHIVE_FILE --no-overwrites" ) \
    $( [ "$OVERWRITE" = true ] && echo "--force-overwrites" ) \
    --extractor-args youtubetab:skip=authcheck \
    --referer "$CHANNEL_URL" \
    --sleep-interval 5 \
    --max-sleep-interval 10 \
    --retries 10 \
    --file-access-retries 5 \
    --fragment-retries 5 \
    --add-header "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
    --add-header "Accept-Language:en-us,en;q=0.5" \
    --add-header "Accept-Encoding:gzip, deflate" \
    --add-header "Accept-Charset:ISO-8859-1,utf-8;q=0.7,*;q=0.7" \
    --add-header "User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" \
    $EXTRA_OPTS \
    "$CHANNEL_URL"

# Handle playlist URL mode
elif [ -n "$PLAYLIST_URL" ]; then
    # Generate a unique archive file name based on the playlist URL
    ARCHIVE_FILE="${ARCHIVE_DIR}/$(echo "$PLAYLIST_URL" | md5sum | cut -d' ' -f1).txt"

    yt-dlp --playlist-reverse \
    $EMBED_SUBS_OPTS \
    -o "$OUTPUT_DIR/%(playlist)s/%(playlist_index)s.%(title)s.%(ext)s" \
    --cookies-from-browser chrome \
    -N 1 \
    $FORMAT_OPTS \
    $WRITE_SUBS_OPTS \
    --sub-langs "en,en-US,en-GB,zh-Hans,zh-Hant,zh-CN,zh" \
    --continue \
    $( [ "$OVERWRITE" != true ] && echo "--download-archive $ARCHIVE_FILE --no-overwrites" ) \
    $( [ "$OVERWRITE" = true ] && echo "--force-overwrites" ) \
    --yes-playlist \
    --sleep-interval 5 \
    --max-sleep-interval 10 \
    --retries 10 \
    --file-access-retries 5 \
    --fragment-retries 5 \
    --add-header "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
    --add-header "Accept-Language:en-us,en;q=0.5" \
    --add-header "Accept-Encoding:gzip, deflate" \
    --add-header "Accept-Charset:ISO-8859-1,utf-8;q=0.7,*;q=0.7" \
    --add-header "User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" \
    $EXTRA_OPTS \
    "$PLAYLIST_URL"

# Handle individual video URLs mode
else
    for url in "${VIDEO_URLS[@]}"; do
        # Generate a unique archive file name based on the video URL
        ARCHIVE_FILE="${ARCHIVE_DIR}/$(echo "$url" | md5sum | cut -d' ' -f1).txt"
        [ "$OVERWRITE" != true ] && touch "$ARCHIVE_FILE"

        yt-dlp $EMBED_SUBS_OPTS \
        -o "$OUTPUT_DIR/%(uploader)s - Videos/%(title)s.%(ext)s" \
        --cookies-from-browser chrome \
        -N 1 \
        $FORMAT_OPTS \
        $WRITE_SUBS_OPTS \
        --sub-langs "en,en-US,zh-Hans,zh-Hant,zh-CN,zh" \
        --continue \
        $( [ "$OVERWRITE" != true ] && echo "--download-archive $ARCHIVE_FILE --no-overwrites" ) \
        $( [ "$OVERWRITE" = true ] && echo "--force-overwrites" ) \
        --sleep-interval 5 \
        --max-sleep-interval 10 \
        --retries 10 \
        --file-access-retries 5 \
        --fragment-retries 5 \
        --add-header "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
        --add-header "Accept-Language:en-us,en;q=0.5" \
        --add-header "Accept-Encoding:gzip, deflate" \
        --add-header "Accept-Charset:ISO-8859-1,utf-8;q=0.7,*;q=0.7" \
        --add-header "User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" \
        "$url"
    done
fi