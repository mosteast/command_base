#!/usr/bin/env bash

set -euo pipefail

script_name=$(basename "$0")
script_version="0.1.0"

GREEN=$'\033[32m'
YELLOW=$'\033[33m'
BLUE=$'\033[34m'
RED=$'\033[31m'
RESET=$'\033[0m'

LEVEL_ERROR=0
LEVEL_WARN=1
LEVEL_INFO=2
LEVEL_DEBUG=3

log_threshold=$LEVEL_INFO
dry_run=false

handle_error() {
  local exit_code=$?
  if [ "$exit_code" -ne 0 ]; then
    log_error "Execution failed with exit code ${exit_code}."
  fi
  exit "$exit_code"
}
trap handle_error ERR

print_help() {
  cat <<EOF
Usage: ${script_name} [options] [commit message]

Description:
  Format the project using npm scripts, then delegate to the 'g' command to stage, commit, and push changes.

Options:
  -h, --help        Show this help message and exit.
  -v, --version     Show the version number and exit.
  --debug           Print verbose debug logs.
  --quiet           Print only warnings and errors.
  -d, --dry-run     Print the planned actions without executing them.

Examples:
  # Format code, commit with a custom message, and push
  \$0 "Run format before commit"

  # Preview the commands without executing them
  \$0 --dry-run

  # Run with detailed logs and rely on the default timestamp commit message
  \$0 --debug
EOF
}

print_version() {
  echo "${script_version}"
}

log_emit() {
  local level=$1
  local color=$2
  local label=$3
  shift 3
  local message="$*"

  if [ "$log_threshold" -lt "$level" ]; then
    return 0
  fi

  if [ "$level" -le "$LEVEL_WARN" ]; then
    >&2 printf "%b[%s]%b %s\n" "$color" "$label" "$RESET" "$message"
  else
    printf "%b[%s]%b %s\n" "$color" "$label" "$RESET" "$message"
  fi
}

log_error() {
  log_emit "$LEVEL_ERROR" "$RED" "ERROR" "$*"
}

log_warn() {
  log_emit "$LEVEL_WARN" "$YELLOW" "WARN" "$*"
}

log_info() {
  log_emit "$LEVEL_INFO" "$GREEN" "INFO" "$*"
}

log_debug() {
  log_emit "$LEVEL_DEBUG" "$BLUE" "DEBUG" "$*"
}

format_command() {
  local formatted=""
  local arg
  for arg in "$@"; do
    formatted+=$(printf '%q ' "$arg")
  done
  printf "%s" "${formatted% }"
}

ensure_dependency() {
  local dependency=$1
  log_debug "Verifying dependency: ${dependency}"
  if ! which "$dependency" >/dev/null 2>&1; then
    log_error "Required dependency '${dependency}' is not installed or not on PATH."
    exit 1
  fi
}

execute_step() {
  local description=$1
  shift
  local command_str
  command_str=$(format_command "$@")
  log_debug "${description}"
  log_debug "Command: ${command_str}"

  if [ "$dry_run" = true ]; then
    log_info "Dry run: ${command_str}"
    return 0
  fi

  "$@"
}

run_formatter() {
  execute_step "Running npm formatter." npm run format
}

delegate_to_g() {
  local g_path=$1
  shift
  execute_step "Delegating to '${g_path}'." "$g_path" "$@"
}

run() {
  local -a positional=()
  local -a g_flags=()

  while (($#)); do
    case "$1" in
      -h|--help)
        print_help
        exit 0
        ;;
      -v|--version)
        print_version
        exit 0
        ;;
      --debug)
        log_threshold=$LEVEL_DEBUG
        g_flags+=("--debug")
        shift
        ;;
      --quiet)
        log_threshold=$LEVEL_WARN
        g_flags+=("--quiet")
        shift
        ;;
      -d|--dry-run)
        dry_run=true
        g_flags+=("--dry-run")
        shift
        ;;
      --)
        shift
        while (($#)); do
          positional+=("$1")
          shift
        done
        ;;
      -*)
        log_error "Unknown option: $1"
        exit 1
        ;;
      *)
        positional+=("$1")
        shift
        ;;
    esac
  done

  local commit_message=""
  if [ "${#positional[@]}" -gt 0 ]; then
    commit_message="${positional[*]}"
  fi

  ensure_dependency npm
  ensure_dependency g

  local g_path
  log_debug "Locating 'g' command via which."
  log_debug "Command: which g"
  g_path=$(which g)

  if [ "$dry_run" = true ]; then
    log_info "Dry run: $(format_command npm run format)"
    local -a delegate_args=("$g_path")
    if [ "${#g_flags[@]}" -gt 0 ]; then
      delegate_args+=("${g_flags[@]}")
    fi
    if [ -n "$commit_message" ]; then
      delegate_args+=("$commit_message")
    fi
    log_info "Dry run: $(format_command "${delegate_args[@]}")"
    return 0
  fi

  run_formatter

  if [ -n "$commit_message" ]; then
    if [ "${#g_flags[@]}" -gt 0 ]; then
      delegate_to_g "$g_path" "${g_flags[@]}" "$commit_message"
    else
      delegate_to_g "$g_path" "$commit_message"
    fi
  else
    if [ "${#g_flags[@]}" -gt 0 ]; then
      delegate_to_g "$g_path" "${g_flags[@]}"
    else
      delegate_to_g "$g_path"
    fi
  fi
}

run "$@"
