#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

readonly COLOR_RESET="\033[0m"
readonly COLOR_RED="\033[31m"
readonly COLOR_GREEN="\033[32m"
readonly COLOR_YELLOW="\033[33m"
readonly COLOR_BLUE="\033[34m"
readonly COLOR_MAGENTA="\033[35m"

script_name() {
  basename "${BASH_SOURCE[0]}"
}

print_usage() {
  local name
  name="$(script_name)"
  printf "%bUsage:%b\n" "${COLOR_BLUE}" "${COLOR_RESET}"
  printf "  %s [options] [package...]\n\n" "${name}"

  printf "%bDescription:%b\n" "${COLOR_BLUE}" "${COLOR_RESET}"
  printf "  %s\n" "Create (if needed) and reuse a Python virtual environment, then install the"
  printf "  %s\n" "requested packages inside it to comply with Python's externally-managed"
  printf "  %s\n\n" "environment policy (PEP 668)."

  printf "%bOptions:%b\n" "${COLOR_BLUE}" "${COLOR_RESET}"
  printf "  %b--venv-path <path>%b      Virtual environment directory (default: .venv)\n" "${COLOR_YELLOW}" "${COLOR_RESET}"
  printf "  %b--python-path <path>%b    Python interpreter to bootstrap the venv (default: python3)\n" "${COLOR_YELLOW}" "${COLOR_RESET}"
  printf "  %b--requirements <file>%b   Install packages from a requirements file (optional)\n" "${COLOR_YELLOW}" "${COLOR_RESET}"
  printf "  %b--upgrade%b                Upgrade pip/setuptools/wheel before installs (default: false)\n" "${COLOR_YELLOW}" "${COLOR_RESET}"
  printf "  %b-h, --help%b             Show this help message and exit\n\n" "${COLOR_YELLOW}" "${COLOR_RESET}"

  printf "%bExamples:%b\n" "${COLOR_BLUE}" "${COLOR_RESET}"
  printf "  %s TTS\n" "${name}"
  printf "  %s --venv-path \"$HOME/.virtualenvs/tts_env\" TTS numpy\n" "${name}"
  printf "  %s --requirements requirements.txt\n" "${name}"
}

log_info() { printf "%b[INFO]%b %s\n" "${COLOR_GREEN}" "${COLOR_RESET}" "$1"; }
log_warn() { printf "%b[WARN]%b %s\n" "${COLOR_YELLOW}" "${COLOR_RESET}" "$1"; }
log_error() { printf "%b[ERROR]%b %s\n" "${COLOR_RED}" "${COLOR_RESET}" "$1"; }

fail() {
  log_error "$1"
  exit 1
}

main() {
  local venv_path=".venv"
  local python_path="python3"
  local requirements_file=""
  local upgrade_tools=false
  local -a packages=()

  while (($# > 0)); do
    case "$1" in
      --venv-path)
        shift || fail "Missing value for --venv-path"
        venv_path="$1"
        ;;
      --python-path)
        shift || fail "Missing value for --python-path"
        python_path="$1"
        ;;
      --requirements)
        shift || fail "Missing value for --requirements"
        requirements_file="$1"
        ;;
      --upgrade)
        upgrade_tools=true
        ;;
      -h|--help)
        print_usage
        exit 0
        ;;
      --)
        shift
        while (($# > 0)); do
          packages+=("$1")
          shift
        done
        break
        ;;
      -*)
        fail "Unsupported option: $1"
        ;;
      *)
        packages+=("$1")
        ;;
    esac
    shift || true
  done

  if ! command -v "${python_path}" >/dev/null 2>&1; then
    fail "Python interpreter not found: ${python_path}"
  fi

  if [[ -n "${requirements_file}" && ! -f "${requirements_file}" ]]; then
    fail "Requirements file not found: ${requirements_file}"
  fi

  if [[ ${#packages[@]} -eq 0 && -z "${requirements_file}" ]]; then
    print_usage
    fail "Provide at least one package or a requirements file."
  fi

  log_info "Using virtual environment: ${venv_path}"
  if [[ ! -d "${venv_path}" ]]; then
    log_info "Creating virtual environment with ${python_path}"
    "${python_path}" -m venv "${venv_path}" || fail "Failed to create virtual environment"
  fi

  local venv_python
  venv_python="${venv_path}/bin/python"
  local venv_pip
  venv_pip="${venv_path}/bin/pip"

  if [[ ! -x "${venv_python}" ]]; then
    fail "Virtual environment is missing python executable at ${venv_python}"
  fi

  if [[ "${upgrade_tools}" == true ]]; then
    log_info "Upgrading pip, setuptools, and wheel"
    "${venv_python}" -m pip install --upgrade pip setuptools wheel || fail "Failed to upgrade tooling"
  fi

  if [[ -n "${requirements_file}" ]]; then
    log_info "Installing from requirements file: ${requirements_file}"
    "${venv_python}" -m pip install -r "${requirements_file}" || fail "Failed to install from requirements"
  fi

  if [[ ${#packages[@]} -gt 0 ]]; then
    log_info "Installing packages: ${packages[*]}"
    "${venv_python}" -m pip install "${packages[@]}" || fail "Failed to install requested packages"
  fi

  log_info "Installation complete."
  printf "%b[HINT]%b Activate with: %s\n" "${COLOR_MAGENTA}" "${COLOR_RESET}" "source \"${venv_path}/bin/activate\""
  printf "%b[HINT]%b Use pip via: %s\n" "${COLOR_MAGENTA}" "${COLOR_RESET}" "${venv_pip} <args>"
}

main "$@"
