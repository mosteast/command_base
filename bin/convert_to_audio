#!/bin/bash

# Script to convert videos to AAC audio files using FFmpeg
# Usage examples:
#   ./convert_to_audio dir1/*.mp4 dir2/*.mp4
#   ./convert_to_audio videos/*.mp4 -o /path/to/audio
#   ./convert_to_audio video1.mp4 video2.mp4
#   ./convert_to_audio "videos/**/*.mp4" --bitrate 128k
#   ./convert_to_audio "lecture_*.{mp4,mkv,avi}" --output ~/Music

# Default values
output_dir=""
input_patterns=()
bitrate="128k"
force_overwrite=false
parallel_jobs=5

# ANSI color codes for readable output (disable when not on a TTY)
if [ -t 1 ] || [ "${FORCE_COLOR:-}" = "1" ]; then
    color_reset="\033[0m"
    color_yellow="\033[0;33m"
else
    color_reset=""
    color_yellow=""
fi

# State file for tracking conversion progress
state_file="$HOME/.cache/convert_to_audio_state"

# Ensure cache directory exists
mkdir -p "$(dirname "$state_file")"

# Function to initialize or load state file
init_state_file() {
    if [ ! -f "$state_file" ]; then
        # Create new state file with header
        echo "# State file for convert_to_audio script" > "$state_file"
        echo "# Format: status|input_file|output_file|timestamp" >> "$state_file"
    fi
}

# Function to clean incomplete conversions from previous runs
clean_incomplete_conversions() {
    if [ ! -f "$state_file" ]; then
        return 0
    fi
    
    echo "Checking for incomplete conversions from previous runs..."
    local cleaned_count=0
    
    # Create temporary file for new state
    local temp_state="$(mktemp)"
    
    # Process each line in state file
    while IFS='|' read -r status input_file output_file timestamp; do
        # Skip comments and empty lines
        if [[ "$status" =~ ^#.*$ ]] || [ -z "$status" ]; then
            echo "$status|$input_file|$output_file|$timestamp" >> "$temp_state"
            continue
        fi
        
        case "$status" in
            "started")
                # This conversion was started but never completed - remove incomplete file
                if [ -f "$output_file" ]; then
                    echo "  Removing incomplete file: $(basename "$output_file")"
                    rm -f "$output_file"
                    ((cleaned_count++))
                fi
                # Don't copy this entry to new state file (remove it)
                ;;
            "completed"|"failed")
                # Keep completed and failed entries
                echo "$status|$input_file|$output_file|$timestamp" >> "$temp_state"
                ;;
        esac
    done < "$state_file"
    
    # Replace state file with cleaned version
    mv "$temp_state" "$state_file"
    
    if [ "$cleaned_count" -gt 0 ]; then
        echo "  Cleaned up $cleaned_count incomplete files"
    else
        echo "  No incomplete files found"
    fi
    echo ""
}

# Function to check if file conversion is already completed
is_conversion_completed() {
    local input_file="$1"
    local output_file="$2"
    
    if [ ! -f "$state_file" ]; then
        return 1
    fi
    
    # Look for completed entry with matching input and output files
    while IFS='|' read -r status input_file_state output_file_state timestamp; do
        if [ "$status" = "completed" ] && [ "$input_file_state" = "$input_file" ] && [ "$output_file_state" = "$output_file" ]; then
            # Also verify the output file actually exists
            if [ -f "$output_file" ]; then
                return 0
            else
                # State says completed but file is missing - mark for reconversion
                return 1
            fi
        fi
    done < "$state_file"
    
    return 1
}

# Function to update conversion state
update_conversion_state() {
    local status="$1"
    local input_file="$2"
    local output_file="$3"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    
    # Create temporary file for updated state
    local temp_state="$(mktemp)"
    local found_entry=false
    
    # Copy existing entries, updating any matching entry
    if [ -f "$state_file" ]; then
        while IFS='|' read -r old_status old_input old_output old_timestamp; do
            if [ "$old_input" = "$input_file" ] && [ "$old_output" = "$output_file" ]; then
                # Update this entry
                echo "$status|$input_file|$output_file|$timestamp" >> "$temp_state"
                found_entry=true
            else
                # Keep existing entry
                echo "$old_status|$old_input|$old_output|$old_timestamp" >> "$temp_state"
            fi
        done < "$state_file"
    fi
    
    # If no existing entry found, add new one
    if [ "$found_entry" = false ]; then
        echo "$status|$input_file|$output_file|$timestamp" >> "$temp_state"
    fi
    
    # Replace state file
    mv "$temp_state" "$state_file"
}

# Function to display usage
usage() {
    echo "Usage: $0 [PATTERNS...] [OPTIONS]"
    echo ""
    echo "Arguments:"
    echo "  PATTERNS               One or more glob patterns or file paths"
    echo ""
    echo "Options:"
    echo "  --output, -o DIR       Output directory for audio files (default: same directory as each input file)"
    echo "  --bitrate, -b RATE     Audio bitrate (default: 128k)"
    echo "  --parallel, -p NUM     Number of parallel conversions (default: 5)"
    echo "  --force, -F            Force overwrite existing files"
    echo "  --state-info           Show state file information and exit"
    echo "  --clear-state          Clear the state file and exit"
    echo "  --help, -h             Display this help message"
    echo ""
    echo "Examples:"
    echo "  $0 '*.mp4'                           # Convert all MP4s in current dir, output to same dir"
    echo "  $0 dir1/*.mp4 dir2/*.mkv             # Convert files from multiple directories"
    echo "  $0 videos/*.mp4 -o ~/Music           # Convert files, output to ~/Music"
    echo "  $0 'videos/**/*.{mp4,mkv}' -b 192k   # Recursive with high bitrate"
    echo "  $0 video1.mp4 video2.mkv --force     # Convert specific files, overwrite existing"
    echo "  $0 --state-info                      # Show conversion state information"
    echo "  $0 --clear-state                     # Clear conversion state"
    exit 1
}

# Function to show state file information
show_state_info() {
    if [ ! -f "$state_file" ]; then
        echo "No state file found at: $state_file"
        exit 0
    fi
    
    echo "State file location: $state_file"
    echo "State file size: $(du -h "$state_file" | cut -f1)"
    echo ""
    
    local completed_count=0
    local failed_count=0
    local started_count=0
    
    while IFS='|' read -r status input_file output_file timestamp; do
        if [[ "$status" =~ ^#.*$ ]] || [ -z "$status" ]; then
            continue
        fi
        
        case "$status" in
            "completed") ((completed_count++)) ;;
            "failed") ((failed_count++)) ;;
            "started") ((started_count++)) ;;
        esac
    done < "$state_file"
    
    echo "Conversion statistics:"
    echo "  Completed: $completed_count"
    echo "  Failed: $failed_count"
    echo "  Incomplete (started but not finished): $started_count"
    
    if [ "$started_count" -gt 0 ]; then
        echo ""
        echo "Note: $started_count incomplete conversions will be cleaned up on next run"
    fi
    
    exit 0
}

# Function to clear state file
clear_state() {
    if [ -f "$state_file" ]; then
        rm -f "$state_file"
        echo "State file cleared: $state_file"
    else
        echo "No state file found at: $state_file"
    fi
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --output|-o)
            output_dir="$2"
            shift 2
            ;;
        --bitrate|-b)
            bitrate="$2"
            shift 2
            ;;
        --parallel|-p)
            parallel_jobs="$2"
            shift 2
            ;;
        --force|-F)
            force_overwrite=true
            shift
            ;;
        --state-info)
            show_state_info
            ;;
        --clear-state)
            clear_state
            ;;
        --help|-h)
            usage
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            ;;
        *)
            # Positional argument - treat as input pattern
            input_patterns+=("$1")
            shift
            ;;
    esac
done

# Check if any input patterns were provided
if [ ${#input_patterns[@]} -eq 0 ]; then
    echo "Error: No input patterns or files specified"
    echo ""
    usage
fi

# Check if ffmpeg is installed
if ! command -v ffmpeg &> /dev/null; then
    echo "Error: ffmpeg is not installed. Please install it first."
    exit 1
fi

# Initialize state file and clean up incomplete conversions
init_state_file
clean_incomplete_conversions

# Create output directory if it's specified
if [ -n "$output_dir" ]; then
    mkdir -p "$output_dir"
fi

# Create temporary file for video list
list_file="$(mktemp)"
trap 'rm -f "$list_file"' EXIT

# Function to check if a file is a video file
is_video_file() {
    local file="$1"
    local ext="${file##*.}"
    # Convert to lowercase using tr (more portable than ${ext,,})
    ext=$(echo "$ext" | tr '[:upper:]' '[:lower:]')
    
    case "$ext" in
        mp4|mkv|avi|mov|wmv|flv|webm|m4v|mpg|mpeg|3gp|ogv)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Function to get video files from input patterns
get_video_files() {
    echo "Processing input patterns..."
    
    # Enable extended globbing - check if globstar is supported
    if shopt -s globstar 2>/dev/null; then
        echo "Globstar enabled for recursive matching"
    else
        echo "Globstar not supported, using find for recursive patterns"
    fi
    
    shopt -s nullglob extglob 2>/dev/null || true
    
    for pattern in "${input_patterns[@]}"; do
        echo "Processing pattern: $pattern"
        
        # Check if pattern contains ** (recursive pattern)
        if [[ "$pattern" == *"**"* ]]; then
            # Handle recursive patterns with find
            local base_dir="${pattern%%/**}"
            local file_pattern="${pattern##**/}"
            
            if [ -d "$base_dir" ]; then
                find "$base_dir" -type f -name "$file_pattern" 2>/dev/null | while IFS= read -r file; do
                    if is_video_file "$file"; then
                        echo "$file" >> "$list_file"
                    fi
                done
            else
                echo "Warning: Directory not found: $base_dir"
            fi
        else
            # Handle regular patterns
            # Always use find for better handling of complex paths and patterns
            local dir_part="${pattern%/*}"
            local file_part="${pattern##*/}"
            
            # If pattern doesn't contain a slash, use current directory
            if [ "$dir_part" = "$pattern" ]; then
                dir_part="."
                file_part="$pattern"
            fi
            
            echo "  Directory: $dir_part"
            echo "  Pattern: $file_part"
            
            if [ -d "$dir_part" ]; then
                find "$dir_part" -maxdepth 1 -type f -name "$file_part" 2>/dev/null | while IFS= read -r file; do
                    if is_video_file "$file"; then
                        echo "$(readlink -f "$file")" >> "$list_file"
                    fi
                done
            else
                echo "Warning: Directory not found: $dir_part"
            fi
        fi
    done
    
    # Sort the results and remove duplicates
    if [ -s "$list_file" ]; then
        sort "$list_file" | uniq > "${list_file}.tmp"
        mv "${list_file}.tmp" "$list_file"
    fi
}

# Function to convert a single video file to AAC audio
convert_video_to_audio() {
    local input_file="$1"
    
    # Validate input file exists and is readable
    if [ ! -f "$input_file" ]; then
        echo "✗ File not found: $input_file"
        return 1
    fi
    
    if [ ! -r "$input_file" ]; then
        echo "✗ File not readable: $input_file"
        return 1
    fi
    
    local filename=$(basename "$input_file")
    local name_without_ext="${filename%.*}"
    
    # Determine output file path
    local output_file
    if [ -n "$output_dir" ]; then
        # Use specified output directory
        output_file="$output_dir/${name_without_ext}.aac"
    else
        # Use same directory as input file
        local input_dir=$(dirname "$input_file")
        output_file="$input_dir/${name_without_ext}.aac"
    fi
    
    # Mark conversion as started in state file
    update_conversion_state "started" "$input_file" "$output_file"
    
    # Truncate very long filenames for display
    local display_filename="$filename"
    if [ ${#display_filename} -gt 80 ]; then
        display_filename="${filename:0:40}...${filename: -37}"
    fi
    
    echo "Processing: $display_filename -> $(basename "$output_file")"
    
    # Check if source already has AAC audio - if so, just copy it (much faster!)
    local audio_codec=""
    local conversion_method=""
    local ffmpeg_args=""
    
    # Safely probe the audio codec with proper quoting
    if audio_codec=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=codec_name -of csv=p=0 "$input_file" 2>/dev/null) && [ -n "$audio_codec" ]; then
        # Successfully detected audio codec - clean it up (remove any extra whitespace/characters)
        audio_codec=$(echo "$audio_codec" | tr -d '[:space:]' | head -c 20)
        
        if [ "x$audio_codec" = "xaac" ]; then
            # Source is already AAC - just copy the stream (super fast!)
            conversion_method="COPYING"
            ffmpeg_args="-vn -acodec copy"
            echo "  Method: Stream copy (source is already AAC)"
        else
            # Need to actually convert to AAC
            conversion_method="CONVERTING"
            echo "  Method: Converting from $audio_codec to AAC"
        fi
    else
        # Failed to detect codec or no audio stream - assume conversion needed
        conversion_method="CONVERTING"
        echo "  Method: Converting to AAC (codec detection failed)"
    fi
    
    # Set up conversion arguments if needed
    if [ "x$conversion_method" = "xCONVERTING" ]; then
        # Try to use hardware acceleration on macOS
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # Check if VideoToolbox is available (modern macOS)
            if ffmpeg -hide_banner -encoders 2>/dev/null | grep -q "aac_at"; then
                ffmpeg_args="-vn -acodec aac_at -b:a $bitrate -threads 0"
            else
                ffmpeg_args="-vn -acodec aac -b:a $bitrate -threads 0"
            fi
        else
            ffmpeg_args="-vn -acodec aac -b:a $bitrate -threads 0"
        fi
    fi
    
    # Execute the conversion/copy with better error handling
    local ffmpeg_exit_code=0
    local error_output=""
    
    if [ "x$force_overwrite" = "xtrue" ]; then
        error_output=$(ffmpeg -hide_banner -loglevel error -i "$input_file" $ffmpeg_args -y "$output_file" 2>&1)
        ffmpeg_exit_code=$?
    else
        error_output=$(ffmpeg -hide_banner -loglevel error -i "$input_file" $ffmpeg_args "$output_file" 2>&1)
        ffmpeg_exit_code=$?
    fi
    
    # If ffmpeg failed, try with safer approach (create symlink with shorter name)
    if [ $ffmpeg_exit_code -ne 0 ] && [ ${#input_file} -gt 200 ]; then
        echo "  Retrying with shorter filename (original path too long)..."
        
        # Create a temporary symlink with shorter name
        local temp_link="/tmp/temp_video_$(date +%s).${input_file##*.}"
        ln -sf "$input_file" "$temp_link" 2>/dev/null
        
        if [ -L "$temp_link" ]; then
            if [ "x$force_overwrite" = "xtrue" ]; then
                error_output=$(ffmpeg -hide_banner -loglevel error -i "$temp_link" $ffmpeg_args -y "$output_file" 2>&1)
                ffmpeg_exit_code=$?
            else
                error_output=$(ffmpeg -hide_banner -loglevel error -i "$temp_link" $ffmpeg_args "$output_file" 2>&1)
                ffmpeg_exit_code=$?
            fi
            
            # Clean up temp symlink
            rm -f "$temp_link" 2>/dev/null
        fi
    fi
    
    if [ $ffmpeg_exit_code -eq 0 ]; then
        # Mark conversion as completed in state file
        update_conversion_state "completed" "$input_file" "$output_file"
        
        if [ "x$conversion_method" = "xCOPYING" ]; then
            echo "✓ Successfully copied: $(basename "$output_file") (no re-encoding needed!)"
        else
            echo "✓ Successfully converted: $(basename "$output_file")"
        fi
    else
        # Mark conversion as failed in state file
        update_conversion_state "failed" "$input_file" "$output_file"
        
        echo "✗ Failed to process: $filename (exit code: $ffmpeg_exit_code)"
        if [ -n "$error_output" ]; then
            # Show first line of error for debugging
            local first_error=$(echo "$error_output" | head -n 1 | cut -c 1-100)
            echo "  Error: $first_error"
        fi
        return 1
    fi
}

# Get video files
get_video_files

# Check if any files were found
if [ ! -s "$list_file" ]; then
    echo "Error: No video files found"
    exit 1
fi

# Configuration summary
if [ -n "$output_dir" ]; then
    echo "Output directory: $output_dir"
else
    echo "Output directory: same as input files"
fi
echo "Audio bitrate: $bitrate"
echo ""

# Convert video files in batches
converted_count=0
failed_count=0
skipped_count=0
total_count=$(wc -l < "$list_file" 2>/dev/null || echo 0)
processed_count=0

# Check for already converted files first
temp_unconverted="$(mktemp)"

echo "Checking for already converted files..."
while IFS= read -r video_file; do
    filename=$(basename "$video_file")
    name_without_ext="${filename%.*}"
    
    # Determine output file path
    if [ -n "$output_dir" ]; then
        output_file="$output_dir/${name_without_ext}.aac"
    else
        input_dir=$(dirname "$video_file")
        output_file="$input_dir/${name_without_ext}.aac"
    fi
    
    if [ "x$force_overwrite" = "xfalse" ]; then
        if is_conversion_completed "$video_file" "$output_file"; then
            echo "Already converted: $(basename "$video_file")"
            ((skipped_count++))
            continue
        fi

        if [ -f "$output_file" ]; then
            printf "%b⚠ Audio already exists, skipping:%b %s\n" "$color_yellow" "$color_reset" "$(basename "$output_file")"
            ((skipped_count++))
            continue
        fi
    fi

    echo "$video_file" >> "$temp_unconverted"
done < "$list_file"

unconverted_count=$(wc -l < "$temp_unconverted" 2>/dev/null || echo 0)

echo ""
echo "Files already converted: $skipped_count"
echo "Files to convert: $unconverted_count"
echo "Converting all files..."
echo ""

# Convert all files with parallel processing
job_pids=()
current_jobs=0

# Create temporary files for tracking results
temp_success="$(mktemp)"
temp_failure="$(mktemp)"
trap 'rm -f "$list_file" "$temp_unconverted" "$temp_success" "$temp_failure"' EXIT

# Function to start a conversion job in background
start_conversion_job() {
    local video_file="$1"
    (
        if convert_video_to_audio "$video_file"; then
            echo "1" >> "$temp_success"
        else
            echo "1" >> "$temp_failure"
        fi
    ) &
    local pid=$!
    job_pids+=("$pid")
    ((current_jobs++))
}

# Process files with parallel limit
while IFS= read -r video_file; do
    # Wait if we've reached the parallel job limit
    while [ "$current_jobs" -ge "$parallel_jobs" ]; do
        sleep 0.1
        # Check for completed jobs
        for i in "${!job_pids[@]}"; do
            local pid="${job_pids[$i]}"
            if ! kill -0 "$pid" 2>/dev/null; then
                # Job is done, remove it from the array
                unset "job_pids[$i]"
                ((current_jobs--))
            fi
        done
        # Rebuild array to remove gaps
        job_pids=("${job_pids[@]}")
    done
    
    # Start new conversion job
    start_conversion_job "$video_file"
done < "$temp_unconverted"

# Wait for all remaining jobs to complete
if [ "$current_jobs" -gt 0 ]; then
    echo "Waiting for remaining $current_jobs conversion jobs to complete..."
    for pid in "${job_pids[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            wait "$pid"
        fi
    done
fi

# Count results from temporary files
converted_count=0
failed_count=0
if [ -f "$temp_success" ]; then
    converted_count=$(wc -l < "$temp_success" 2>/dev/null || echo 0)
fi
if [ -f "$temp_failure" ]; then
    failed_count=$(wc -l < "$temp_failure" 2>/dev/null || echo 0)
fi
processed_count=$((converted_count + failed_count))

# Summary
echo ""
echo "=== Conversion Summary ==="
echo "Total video files found: $total_count"
echo "Already converted (skipped): $skipped_count"
echo "Files needing conversion: $unconverted_count"
echo "Files processed this run: $processed_count"
echo "Successfully converted: $converted_count"
echo "Failed: $failed_count"

if [ "$failed_count" -eq 0 ] 2>/dev/null; then
    if [ "$processed_count" -gt 0 ] 2>/dev/null; then
        echo "✓ All processed conversions completed successfully!"
    else
        echo "ℹ️  No files needed conversion."
    fi
else
    echo "⚠ Some conversions failed. Check the output above for details."
    exit 1
fi 
