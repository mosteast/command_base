#!/usr/bin/env node

"use strict";

const path = require("path");

const {
  run_text_prompt_batch_cli,
} = require("../utility/text_prompt_batch_runner");

const command_name = path.basename(process.argv[1] || "text_optimize_speech");
const repo_root_path = path.resolve(__dirname, "..");
const prompt_external_path =
  "/Users/hailang/Library/Mobile Documents/com~apple~CloudDocs/main/download/tool/prompt/text_optimize_speech.build.md";

(async () => {
  await run_text_prompt_batch_cli({
    command_name,
    description_lines: [
      "Polish narrative text for voice delivery using the text_optimize_speech prompt.",
      "Writes `[filename.ext].speech_optimized.md` alongside each input file.",
    ],
    job_title: "Speech optimization",
    job_noun: "speech optimization",
    present_progress_label: "Optimizing for speech",
    past_tense_summary_label: "speech optimized",
    output_suffix: ".speech_optimized.md",
    generated_suffixes: [".speech_optimized.md"],
    generated_file_skip_reason: "already optimized",
    existing_output_skip_reason: "existing output",
    prompt_name: "text_optimize_speech",
    prompt_external_path,
    repo_root_path,
    default_batch_size: 5,
    default_retry_count: 3,
    examples: [
      {
        description:
          "Refine all narrative scripts in the scripts directory for speech recording",
        command: "$0 scripts/**/*.md",
      },
      {
        description:
          "Rewrite the briefing.md file even if the optimized version already exists",
        command: "$0 briefing.md --refresh",
      },
      {
        description:
          "Preview the optimization steps without generating any files",
        command: "$0 podcast/*.txt --dry-run",
      },
    ],
  });
})().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
